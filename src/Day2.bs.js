// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "./Core.bs.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("Day2.InvalidInput");

function parseOpponentResponse(input) {
  switch (input) {
    case "A" :
        return /* Rock */0;
    case "B" :
        return /* Paper */2;
    case "C" :
        return /* Scissors */1;
    default:
      throw {
            RE_EXN_ID: InvalidInput,
            Error: new Error()
          };
  }
}

function parseOwnResponse(input) {
  switch (input) {
    case "X" :
        return /* Rock */0;
    case "Y" :
        return /* Paper */2;
    case "Z" :
        return /* Scissors */1;
    default:
      throw {
            RE_EXN_ID: InvalidInput,
            Error: new Error()
          };
  }
}

function parseOwnResponseByOpponentResponse(opponents, input) {
  switch (input) {
    case "X" :
        switch (opponents) {
          case /* Rock */0 :
              return /* Scissors */1;
          case /* Scissors */1 :
              return /* Paper */2;
          case /* Paper */2 :
              return /* Rock */0;
          
        }
    case "Y" :
        return opponents;
    case "Z" :
        switch (opponents) {
          case /* Rock */0 :
              return /* Paper */2;
          case /* Scissors */1 :
              return /* Rock */0;
          case /* Paper */2 :
              return /* Scissors */1;
          
        }
    default:
      throw {
            RE_EXN_ID: InvalidInput,
            Error: new Error()
          };
  }
}

function calculateResultScore(round) {
  switch (round[0]) {
    case /* Rock */0 :
        switch (round[1]) {
          case /* Rock */0 :
              return 3;
          case /* Scissors */1 :
              return 0;
          case /* Paper */2 :
              return 6;
          
        }
    case /* Scissors */1 :
        switch (round[1]) {
          case /* Rock */0 :
              return 6;
          case /* Scissors */1 :
              return 3;
          case /* Paper */2 :
              return 0;
          
        }
    case /* Paper */2 :
        switch (round[1]) {
          case /* Rock */0 :
              return 0;
          case /* Scissors */1 :
              return 6;
          case /* Paper */2 :
              return 3;
          
        }
    
  }
}

function calculateInputScore(input) {
  switch (input) {
    case /* Rock */0 :
        return 1;
    case /* Scissors */1 :
        return 3;
    case /* Paper */2 :
        return 2;
    
  }
}

function calculate(rows) {
  return rows.reduce((function (result, param) {
                var own = param[1];
                return (result + calculateResultScore([
                              param[0],
                              own
                            ]) | 0) + calculateInputScore(own) | 0;
              }), 0);
}

function part1(param) {
  return calculate(Core.readInput(undefined).split("\n").map(function (row) {
                  var array = row.split(" ");
                  return [
                          parseOpponentResponse(Caml_array.get(array, 0)),
                          parseOwnResponse(Caml_array.get(array, 1))
                        ];
                }));
}

function part2(param) {
  return calculate(Core.readInput(undefined).split("\n").map(function (row) {
                  var array = row.split(" ");
                  var opponents = parseOpponentResponse(Caml_array.get(array, 0));
                  return [
                          opponents,
                          parseOwnResponseByOpponentResponse(opponents, Caml_array.get(array, 1))
                        ];
                }));
}

export {
  InvalidInput ,
  parseOpponentResponse ,
  parseOwnResponse ,
  parseOwnResponseByOpponentResponse ,
  calculateResultScore ,
  calculateInputScore ,
  calculate ,
  part1 ,
  part2 ,
}
/* Core Not a pure module */
