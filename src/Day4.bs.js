// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "./Core.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function parseRowIntoAssignmentTuple(row) {
  return row.split(",").map(function (sector) {
              var sectorsAsInt = sector.split("-").map(function (x) {
                    return Belt_Option.getExn(Belt_Int.fromString(x));
                  });
              return [
                      Belt_Option.getExn(Belt_Array.get(sectorsAsInt, 0)),
                      Belt_Option.getExn(Belt_Array.get(sectorsAsInt, 1))
                    ];
            });
}

function isContains(leftAssignment, rightAssignment) {
  var leftMax = leftAssignment[1];
  var leftMin = leftAssignment[0];
  return Belt_Array.range(rightAssignment[0], rightAssignment[1]).every(function (number) {
              if (leftMin <= number) {
                return leftMax >= number;
              } else {
                return false;
              }
            });
}

function isPairsFullyContains(leftAssignment, rightAssignment) {
  if (isContains(leftAssignment, rightAssignment)) {
    return true;
  } else {
    return isContains(rightAssignment, leftAssignment);
  }
}

function parseInput(param) {
  return Core.readInput(undefined).split("\n").map(parseRowIntoAssignmentTuple);
}

function part1(param) {
  return Belt_Array.keepMap(parseInput(undefined), (function (row) {
                var left = row[0];
                var right = row[1];
                if (isPairsFullyContains(left, right)) {
                  return 0;
                }
                
              })).length;
}

function isIntersect(leftAssignment, rightAssignment) {
  if ((leftAssignment[1] - rightAssignment[0] | 0) >= 0) {
    return (rightAssignment[1] - leftAssignment[0] | 0) >= 0;
  } else {
    return false;
  }
}

function part2(param) {
  return Belt_Array.keepMap(parseInput(undefined), (function (row) {
                var left = row[0];
                var right = row[1];
                if (isIntersect(left, right)) {
                  return 0;
                }
                
              })).length;
}

export {
  parseRowIntoAssignmentTuple ,
  isContains ,
  isPairsFullyContains ,
  parseInput ,
  part1 ,
  isIntersect ,
  part2 ,
}
/* Core Not a pure module */
