// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "./Core.bs.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var NotFound = /* @__PURE__ */Caml_exceptions.create("Day3.NotFound");

var InvalidInput = /* @__PURE__ */Caml_exceptions.create("Day3.InvalidInput");

function splitRow(row) {
  var length = row.length;
  var compartmentSize = length / 2 | 0;
  return [
          row.slice(0, compartmentSize),
          row.slice(compartmentSize)
        ];
}

function findAppearsInBothCompartments(source, compartments) {
  var result = source.split("").find(function (element) {
        return compartments.every(function (compartment) {
                    return Js_string.includes(element, compartment);
                  });
      });
  if (result !== undefined) {
    return result;
  }
  throw {
        RE_EXN_ID: NotFound,
        Error: new Error()
      };
}

function calculatePriority(element) {
  var charCode = element.charCodeAt(0);
  var tmp;
  if (charCode >= 65 && charCode <= 90) {
    tmp = charCode - 38;
  } else if (charCode >= 97 && charCode <= 122) {
    tmp = charCode - 96;
  } else {
    throw {
          RE_EXN_ID: InvalidInput,
          Error: new Error()
        };
  }
  return tmp | 0;
}

function part1(param) {
  return Core.readInput(undefined).split("\n").map(function (row) {
                var match = splitRow(row);
                return findAppearsInBothCompartments(match[0], [match[1]]);
              }).reduce((function (result, element) {
                return result + calculatePriority(element) | 0;
              }), 0);
}

function part2(param) {
  var list = Core.readInput(undefined).split("\n");
  var _result = 0;
  while(true) {
    var result = _result;
    if (list.length < 3) {
      return result;
    }
    var group = list.splice(0, 3);
    var shortest = Belt_Option.getWithDefault(Belt_Array.get(Belt_SortArray.stableSortBy(group, (function (a, b) {
                    return a.length - b.length | 0;
                  })), 0), "");
    _result = result + calculatePriority(findAppearsInBothCompartments(shortest, group)) | 0;
    continue ;
  };
}

export {
  NotFound ,
  InvalidInput ,
  splitRow ,
  findAppearsInBothCompartments ,
  calculatePriority ,
  part1 ,
  part2 ,
}
/* Core Not a pure module */
